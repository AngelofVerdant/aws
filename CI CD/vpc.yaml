AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with Public Subnets, Internet Gateway, NACLs, Routing, Security Group, EC2 Instances, Route Table, and Subnet Associations

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.10.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'continuous_integration'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.10.1.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: 'Name'
          Value: 'public_1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.10.2.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: 'Name'
          Value: 'public_2'

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'continuousIGW'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  Public1ACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'for
          Value: 'public1ACL'

  Public2ACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'
          Value: 'public2ACL'

  Public1InboundAllow:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Public1ACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  Public1OutboundAllow:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Public1ACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  Public2InboundAllow:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Public2ACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  Public2OutboundAllow:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Public2ACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  AssociatePublic1ACL:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref Public1ACL

  AssociatePublic2ACL:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref Public2ACL

  ContinuousSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Continuous Security Group'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  ContinuousInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0005e0cfe09cc9050' 
      InstanceType: 't3.micro'
      KeyName: 'auth0'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref ContinuousSG

  ContinuousInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0005e0cfe09cc9050' 
      InstanceType: 't3.micro'
      KeyName: 'auth0'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref ContinuousSG

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'LambdaVPCPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'
          Value: 'publicRT'

  LocalRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '10.10.0.0/16'
      VpcPeeringConnectionId: !Ref 'AWS::NoValue' # Local route

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0
